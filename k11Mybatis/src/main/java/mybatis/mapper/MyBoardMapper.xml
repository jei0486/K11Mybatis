<?xml version="1.0" encoding="UTF-8" ?>
<!--  
Mapper 를 만들때 아래 doctype 이 필요한데 이는 배포사이트를 가져온다.

https://mybatis.org/mybatis-3/getting-started.html
-->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!--  
  mapper 의 속성
  
  	namespace 
  		: 해당 Mapper파일을 호출하기 위해 정의한 인터페이스(서비스객체)의 패키지를 포함한 풀경로를 기술한다.
  	id 
  		: 실제 호출되는 함수명과 동일한 이름으로 기술한다.
  	resultType 
  		: 쿼리 실행 후 반환되는 값의 타입을 명시한다.
  	parameterType 
  		: 쿼리문에서 사용할 파라미터를 저장한 객체의 타입을 명시한다.			
  -->
  <!--  
  Mybatis  쿼리 성공시 반환값 

	1. select 
	: select 문에 해당하는 결과를 반환한다. 
	아래와 같이 select의 결과가 MyBoardDTO 타입이라면 패키지명을 포함한 클래스의 경로를 resultType에 기술한다.
	만약 여러개의 레코드가 반환되면 List 계열의 컬렉션에 저장되어 반환된다.  	
	
	2.insert
	: 입력 성공시 1, 실패시 0을 반환한다. 만약 insert 가 여러번 되더라도 성공시에는 1을 반환하게된다.
	
	3.update/delete
	: 수정/ 삭제에 성공한 행의 갯수를 반환한다.
	조건에 따라 여러개의 레코드가 적용될수 있으므로 0,1이 아닌 더 큰 값이 반환될 수 도 있다.
	실패의 경우 0이 반환된다
  -->
<mapper  namespace="mybatis.MybatisDAOImpl" >

	<!-- 방명록 리스트 게시물 갯수 카운트  버전 (1)-->
	<!-- <select id="getTotalCount" resultType="int" >
	SELECT  count(*) FROM myboard
	 </select> -->
	 
	 <!--  
	 검색어 처리 : 검색어가 있는 경우와 없는 경우를 구분하여 동적쿼리로 처리하고 싶을때 
		 		아래와 같이 if문을 사용한다.   사용법은 JSTL 과 동일하다
				< if test = '조건' >
	 -->
	 
	<!-- 방명록 리스트 게시물 갯수 카운트  버전 (2)  parameterType="map"   -> 진슬은 map 버전-->
	<select id="getTotalCount" resultType="int" parameterType="mybatis.ParameterDTO">
	SELECT  count(*) FROM myboard
	<if test="searchTxt != null and !searchTxt.equals('')">
        WHERE ${searchField} LIKE '%'||#{searchTxt}||'%' 
    </if>
	 </select>

	 
	 <!--방명록 리스트 : start 와 end 에 해당하는 게시물 가져오기 (페이지 처리)  -->
	 
	 <!--방명록 리스트 버전 1)  -->
	<!--
	  <select id="listPage" resultType="mybatis.MyBoardDTO"  parameterType="int">
	 SELECT * FROM 
	 	( SELECT Tb.*, rownum rNum FROM 
	 		(SELECT * FROM myboard 
	 		
	 		order by idx DESC ) Tb) 
	 			WHERE rNum BETWEEN #{param1} AND #{param2}
	 </select> -->
<!-- <if test="searchTxt != null and !searchTxt.equals('')"> -->
	 
	 <!-- 방명록 리스트 버전 2) -->
	 <select id="listPage" resultType="mybatis.MyBoardDTO"  parameterType="mybatis.ParameterDTO">
	 SELECT * FROM 
	 	( SELECT Tb.*, rownum rNum FROM 
	 		(SELECT * FROM myboard 
	<if test="searchTxt != null and !searchTxt.equals('')">
        WHERE ${searchField} LIKE '%'||#{searchTxt}||'%' 
    </if>
	 		order by idx DESC ) Tb) 
	 			WHERE rNum BETWEEN #{start} AND #{end}
	 </select>
	 
	<!-- 방명록 글쓰기 : 파라미터를 전달하는 3번째 방식 -->	 
	  <insert id="write">
	 	INSERT INTO myboard (idx, id,name,contents) VALUES (myboard_seq.nextval,#{_id},#{_name},#{_contents})
	 </insert>
	 
	 
	 <!--  
	 방명록 수정하기
	 매개변수로 전달된 DTO 객체의 멤버변수명만 명시하면 내부적으로 getter() 를 호출하여 값을 얻어올수 있다.
	 (EL 과 동일한 기능)
	 -->
	 
	 <!-- 수정폼 로딩 -->
	 <select resultType="mybatis.MyBoardDTO" id="view" parameterType="mybatis.ParameterDTO">
	 	select * from myboard where idx = #{board_idx} and id = #{user_id}
	 </select>
	 
	 <!--  
	 방명록 수정처리하기
	 -->
	 <update id="modify" parameterType="mybatis.MyBoardDTO" >
	 	UPDATE myboard SET contents = #{contents} , name=#{name} WHERE idx= #{idx} AND id=#{id} 
	 </update>
	 
	 <!-- 방명록 삭제하기-->
	 <delete id="delete" parameterType="String">
	 	DELETE FROM myboard WHERE idx= #{param1} AND id=#{param2}
	 </delete>
	 
	 
	 
	 
	 
	 
</mapper>